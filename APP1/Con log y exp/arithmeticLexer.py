# Generated from arithmetic.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,126,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,1,1,
        1,1,2,1,2,3,2,57,8,2,1,3,1,3,1,3,3,3,62,8,3,1,3,1,3,3,3,66,8,3,1,
        4,4,4,69,8,4,11,4,12,4,70,1,4,1,4,4,4,75,8,4,11,4,12,4,76,3,4,79,
        8,4,1,5,4,5,82,8,5,11,5,12,5,83,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,21,4,21,121,8,21,11,21,12,21,122,1,21,1,21,0,0,22,1,1,3,0,5,0,
        7,2,9,0,11,0,13,0,15,0,17,3,19,4,21,5,23,6,25,7,27,8,29,9,31,10,
        33,11,35,12,37,13,39,14,41,15,43,16,1,0,4,3,0,65,90,95,95,97,122,
        2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,32,128,0,1,1,
        0,0,0,0,7,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,1,45,1,0,0,0,3,52,1,0,0,0,5,56,1,0,0,0,7,58,1,0,0,0,9,68,1,
        0,0,0,11,81,1,0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,89,1,0,0,0,19,
        91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,0,0,
        0,29,101,1,0,0,0,31,103,1,0,0,0,33,105,1,0,0,0,35,107,1,0,0,0,37,
        109,1,0,0,0,39,111,1,0,0,0,41,115,1,0,0,0,43,120,1,0,0,0,45,49,3,
        3,1,0,46,48,3,5,2,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,
        50,1,0,0,0,50,2,1,0,0,0,51,49,1,0,0,0,52,53,7,0,0,0,53,4,1,0,0,0,
        54,57,3,3,1,0,55,57,2,48,57,0,56,54,1,0,0,0,56,55,1,0,0,0,57,6,1,
        0,0,0,58,65,3,9,4,0,59,61,3,13,6,0,60,62,3,15,7,0,61,60,1,0,0,0,
        61,62,1,0,0,0,62,63,1,0,0,0,63,64,3,11,5,0,64,66,1,0,0,0,65,59,1,
        0,0,0,65,66,1,0,0,0,66,8,1,0,0,0,67,69,2,48,57,0,68,67,1,0,0,0,69,
        70,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,78,1,0,0,0,72,74,5,46,
        0,0,73,75,2,48,57,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,
        77,1,0,0,0,77,79,1,0,0,0,78,72,1,0,0,0,78,79,1,0,0,0,79,10,1,0,0,
        0,80,82,2,48,57,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,
        1,0,0,0,84,12,1,0,0,0,85,86,7,1,0,0,86,14,1,0,0,0,87,88,7,2,0,0,
        88,16,1,0,0,0,89,90,5,40,0,0,90,18,1,0,0,0,91,92,5,41,0,0,92,20,
        1,0,0,0,93,94,5,43,0,0,94,22,1,0,0,0,95,96,5,45,0,0,96,24,1,0,0,
        0,97,98,5,42,0,0,98,26,1,0,0,0,99,100,5,47,0,0,100,28,1,0,0,0,101,
        102,5,62,0,0,102,30,1,0,0,0,103,104,5,60,0,0,104,32,1,0,0,0,105,
        106,5,61,0,0,106,34,1,0,0,0,107,108,5,46,0,0,108,36,1,0,0,0,109,
        110,5,94,0,0,110,38,1,0,0,0,111,112,5,101,0,0,112,113,5,120,0,0,
        113,114,5,112,0,0,114,40,1,0,0,0,115,116,5,108,0,0,116,117,5,111,
        0,0,117,118,5,103,0,0,118,42,1,0,0,0,119,121,7,3,0,0,120,119,1,0,
        0,0,121,122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,1,0,
        0,0,124,125,6,21,0,0,125,44,1,0,0,0,10,0,49,56,61,65,70,76,78,83,
        122,1,6,0,0
    ]

class arithmeticLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VARIABLE = 1
    SCIENTIFIC_NUMBER = 2
    LPAREN = 3
    RPAREN = 4
    PLUS = 5
    MINUS = 6
    TIMES = 7
    DIV = 8
    GT = 9
    LT = 10
    EQ = 11
    POINT = 12
    POW = 13
    EXP = 14
    LOG = 15
    WS = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", 
            "'.'", "'^'", "'exp'", "'log'" ]

    symbolicNames = [ "<INVALID>",
            "VARIABLE", "SCIENTIFIC_NUMBER", "LPAREN", "RPAREN", "PLUS", 
            "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "POINT", "POW", "EXP", 
            "LOG", "WS" ]

    ruleNames = [ "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "SCIENTIFIC_NUMBER", 
                  "NUMBER", "UNSIGNED_INTEGER", "E", "SIGN", "LPAREN", "RPAREN", 
                  "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "POINT", 
                  "POW", "EXP", "LOG", "WS" ]

    grammarFileName = "arithmetic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


